DROP TABLE IF EXISTS candidate;
CREATE TABLE candidate(
    id INT AUTO_INCREMENT,
    fullname VARCHAR(30) NOT NULL,
    PRIMARY KEY (id)
);

----------------------------------------------

DROP TABLE IF EXISTS users_rols;
DROP TABLE IF EXISTS rol;
DROP TABLE IF EXISTS user;
CREATE TABLE user(
    id INT AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(30) NOT NULL UNIQUE,
    status VARCHAR(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE rol(
    id INT AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    description VARCHAR(255),
    PRIMARY KEY (id)
);

CREATE TABLE users_rols(
    user_id INT,
    rol_id INT,
    PRIMARY KEY (user_id, rol_id),
    FOREIGN KEY(user_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY(rol_id) REFERENCES rol(id) ON DELETE CASCADE
);

INSERT INTO user(
    name, password, email, status
)VALUES(
    'Test', '$2a$10$DD/FQ0hTIprg3fGarZl1reK1f7tzgM4RuFKjAKyun0Si60w6g3v5i', 'test@test.com', 'VERIFIED'
);

INSERT INTO rol(
    name, description
)VALUES(
    'ADMIN', 'Usuario administrador del sistema'
),(
    'USER', 'Usuario común del sistema'
);

INSERT INTO users_rols(
    user_id, rol_id
)VALUES(
    1, 1
),(
    1, 2
);

#################################################################
#################################################################
                        PostgreSQL
#################################################################
#################################################################

DROP TABLE IF EXISTS petition, review, appuser;

CREATE TABLE appuser (
    id SERIAL PRIMARY KEY NOT NULL,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    birthdate DATE NOT NULL,
    email VARCHAR(30) NOT NULL,
    password VARCHAR(100) NOT NULL,
    type VARCHAR(1) NOT NULL,
    rating FLOAT NOT NULL DEFAULT 0
);

CREATE TABLE petition(
    id SERIAL PRIMARY KEY NOT NULL,
    day DATE NOT NULL,
    hour timestamptz NOT NULL,
    helped_id INT NOT NULL,
    collaborator_id INT NOT NULL,
    FOREIGN KEY (helped_id) REFERENCES appuser(id) ON UPDATE CASCADE,
    FOREIGN KEY (collaborator_id) REFERENCES appuser(id) ON UPDATE CASCADE
);

CREATE TABLE review(
    id SERIAL PRIMARY KEY NOT NULL,
    rating INT NOT NULL,
    comment VARCHAR(140) DEFAULT '',
    petition_id INT NOT NULL,
    user_id INT NOT NULL,
    FOREIGN KEY (petition_id) REFERENCES petition(id) ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES appuser(id) ON UPDATE CASCADE,
    CHECK (rating BETWEEN 0 AND 10)
);

INSERT INTO appuser(
    first_name,
    last_name,
    birthdate,
    email,
    password,
    type,
    rating
)VALUES
('Lucas','Camino','1995-12-13','lucascamino@test.com','1234','C',10),
('Claudia','Genchi','1967-02-24','claudiagenchi@test.com','1234','C',8),
('Eduardo','Camino','1967-06-18','eduardocamino@test.com','1234','C',7),
('Agustina','Camino','2000-03-22','agustinacamino@test.com','1234','C',4),
('Yiye','Camino','1944-09-20','yiyecamino@test.com','1234','H',8),
('Marga','Carreras','1935-11-04','margacarreras@test.com','1234','H',10),
('Random','Viejo','1938-01-05','randomviejo@test.com','1234','H',4);


INSERT INTO petition(
    day, hour, helped_id, collaborator_id)
    VALUES
    (now(), now() + '- 6 hours', 5, 1),
    (now(), now() + '- 13 hours', 6, 1),
    (now(), now() + '- 5 hours', 5, 1),
    (now(), now() + '- 4 hours', 5, 1),
    (now(), now() + '- 3 hours', 5, 1),
    (now(), now() + '- 2 hours', 5, 1),
    (now(), now() + '- 17 hours', 5, 3);
   
INSERT INTO review(
    rating, comment, petition_id, user_id)
    VALUES
    (10, 'Me agradeció con un caramelo', 1, 1),
    (10, 'Un chico muy amable', 1, 5),
    (7, 'Un asco el alfajor que me dio', 2, 4),
    (2, 'Me trató mal', 2, 6),
    (7, 'Me dio torta de vainilla', 4, 3),
    (10, 'Cumplió con lo que le pedí', 4, 1);

